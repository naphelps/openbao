name: build

on:
  merge_group:
  pull_request:
    # The default types for pull_request are [ opened, synchronize, reopened ].
    # This is insufficient for our needs, since we're skipping stuff on PRs in
    # draft mode.  By adding the ready_for_review type, when a draft pr is marked
    # ready, we run everything, including the stuff we'd have skipped up until now.
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches:
      - main
      - release/**
  workflow_call:
  workflow_dispatch:

concurrency:
  group: ${{ github.head_ref || github.run_id }}-build
  cancel-in-progress: true

jobs:
  # verify-changes determines if the changes are only for docs (website)
  verify-changes:
    uses: ./.github/workflows/verify_changes.yml

  product-metadata:
    # do not run build and test steps for docs changes
    # Following https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/troubleshooting-required-status-checks#handling-skipped-but-required-checks
    # we conditionally skip the build and tests for docs(website) changes
    if: |
      github.event.pull_request.draft == false &&
      needs.verify-changes.outputs.is_docs_change == 'false'
    runs-on: ubuntu-latest
    needs: verify-changes
    outputs:
      build-date: ${{ steps.get-metadata.outputs.build-date }}
      filepath: ${{ steps.generate-metadata-file.outputs.filepath }}
      package-name: ${{ steps.get-metadata.outputs.package-name }}
      bao-revision: ${{ steps.get-metadata.outputs.bao-revision }}
      bao-version: ${{ steps.set-product-version.outputs.product-version }}
      bao-version-package: ${{ steps.get-metadata.outputs.bao-version-package }}
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - name: Ensure Go modules are cached
        uses: ./.github/actions/set-up-go
        id: set-up-go
        with:
          no-restore: true # don't download them on a cache hit
      - name: Set Product version
        id: set-product-version
        uses: hashicorp/actions-set-product-version@v1
      - name: Get metadata
        id: get-metadata
        env:
          OPENBAO_VERSION: ${{ steps.set-product-version.outputs.product-version }}
        run: |
          # shellcheck disable=SC2129
          echo "build-date=$(make ci-get-date)" >> "$GITHUB_OUTPUT"
          echo "package-name=bao" >> "$GITHUB_OUTPUT"
          echo "bao-revision=$(make ci-get-revision)" >> "$GITHUB_OUTPUT"
          echo "bao-version-package=$(make ci-get-version-package)" >> "$GITHUB_OUTPUT"
      - uses: hashicorp/actions-generate-metadata@v1
        id: generate-metadata-file
        with:
          repositoryOwner: 'openbao'
          version: ${{ steps.set-product-version.outputs.product-version }}
          product: ${{ steps.get-metadata.outputs.package-name }}
      - uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: metadata.json
          path: ${{ steps.generate-metadata-file.outputs.filepath }}
          if-no-files-found: error

## Disable UI temporarily.
#
#  build-ui:
#    name: UI
#    runs-on: ubuntu-latest
#    outputs:
#      cache-key: ui-${{ steps.ui-hash.outputs.ui-hash }}
#    steps:
#      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
#      - name: Get UI hash
#        id: ui-hash
#        run: echo "ui-hash=$(git ls-tree HEAD ui --object-only)" >> "$GITHUB_OUTPUT"
#      - name: Set up UI asset cache
#        id: cache-ui-assets
#        uses: actions/cache@ab5e6d0c87105b4c9c2047343972218f562e4319 # v4.0.1
#        with:
#          enableCrossOsArchive: true
#          lookup-only: true
#          path: http/web_ui
#          # Only restore the UI asset cache if we haven't modified anything in the ui directory.
#          # Never do a partial restore of the web_ui if we don't get a cache hit.
#          key: ui-${{ steps.ui-hash.outputs.ui-hash }}
#      - if: steps.cache-ui-assets.outputs.cache-hit != 'true'
#        name: Set up node and yarn
#        uses: actions/setup-node@e33196f7422957bea03ed53f6fbb155025ffc7b8 # v3.7.0
#        with:
#          node-version-file: ui/package.json
#          cache: yarn
#          cache-dependency-path: ui/yarn.lock
#      - if: steps.cache-ui-assets.outputs.cache-hit != 'true'
#        name: Build UI
#        run: make ci-build-ui


  build-other:
    name: Other
    needs:
      - product-metadata
#      - build-ui
    strategy:
      matrix:
        goos: [freebsd, windows, netbsd, openbsd, solaris]
        goarch: [amd64, arm]
        exclude:
          - goos: solaris
            goarch: arm
          - goos: windows
            goarch: arm
      fail-fast: true
    uses: ./.github/workflows/build-vault-ce.yml
    with:
      create-packages: false
      goarch: ${{ matrix.goarch }}
      goos: ${{ matrix.goos }}
      go-tags:
      package-name: ${{ needs.product-metadata.outputs.package-name }}
#      web-ui-cache-key: ${{ needs.build-ui.outputs.cache-key }}
      bao-version: ${{ needs.product-metadata.outputs.bao-version }}
    secrets: inherit

  build-linux:
    name: Linux
    needs:
      - product-metadata
#      - build-ui
    strategy:
      matrix:
        goos: [linux]
        goarch: [arm, arm64, amd64, riscv64]
      fail-fast: true
    uses: ./.github/workflows/build-vault-ce.yml
    with:
      goarch: ${{ matrix.goarch }}
      goos: ${{ matrix.goos }}
      go-tags:
      package-name: ${{ needs.product-metadata.outputs.package-name }}
#      web-ui-cache-key: ${{ needs.build-ui.outputs.cache-key }}
      bao-version: ${{ needs.product-metadata.outputs.bao-version }}
    secrets: inherit

  build-darwin:
    name: Darwin
    needs:
      - product-metadata
#      - build-ui
    strategy:
      matrix:
        goos: [darwin]
        goarch: [amd64, arm64]
      fail-fast: true
    uses: ./.github/workflows/build-vault-ce.yml
    with:
      create-packages: false
      goarch: ${{ matrix.goarch }}
      goos: ${{ matrix.goos }}
      go-tags:
      package-name: ${{ needs.product-metadata.outputs.package-name }}
#      web-ui-cache-key: ${{ needs.build-ui.outputs.cache-key }}
      bao-version: ${{ needs.product-metadata.outputs.bao-version }}
    secrets: inherit

  build-docker:
    name: Docker image
    needs:
      - product-metadata
      - build-linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [arm, arm64, amd64]
    env:
      repo: ${{ github.event.repository.name }}
      version: ${{ needs.product-metadata.outputs.bao-version }}
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - uses: hashicorp/actions-docker-build@v1
        with:
          bin_name: bao
          version: ${{ env.version }}
          target: default
          arch: ${{ matrix.arch }}
          zip_artifact_name: openbao_${{ env.version }}_linux_${{ matrix.arch }}.zip
          tags: |
            docker.io/openbao/${{ env.repo }}:${{ env.version }}

  build-ubi:
    name: UBI image
    needs:
      - product-metadata
      - build-linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64]
    env:
      repo: ${{ github.event.repository.name }}
      version: ${{ needs.product-metadata.outputs.bao-version }}
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - uses: hashicorp/actions-docker-build@v1
        with:
          bin_name: bao
          version: ${{ env.version }}
          target: ubi
          arch: ${{ matrix.arch }}
          zip_artifact_name: openbao_${{ env.version }}_linux_${{ matrix.arch }}.zip
          tags: |
            docker.io/openbao/${{ env.repo }}-ubi:${{ env.version }}

  completed-successfully:
    # We force a failure if any of the dependent jobs fail,
    # this is a workaround for the issue reported https://github.com/actions/runner/issues/2566
    if: always()
    runs-on: ubuntu-latest
    needs:
      - build-other
      - build-linux
      - build-darwin
      - build-docker
      - build-ubi
    steps:
      - run: |
          tr -d '\n' <<< '${{ toJSON(needs.*.result) }}' | grep -q -v -E '(failure|cancelled)'
